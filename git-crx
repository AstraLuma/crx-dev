#!/usr/bin/python
# -*- tab-width: 4; use-tabs: 1; coding: utf-8 -*-
# vim:tabstop=4:noexpandtab:
"""git crx [ops]

Produces a CRX file from a git repository
"""
import os, json, subprocess, tarfile, io, json, tempfile
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-k", "--key", dest="keyfile",
                  help="use or generate private key in FILE", metavar="FILE")
parser.add_option("-v", "--version", dest="version",
                  help="Replace the manifest's version with VERSION, or generate one if it's 'auto'", metavar='VERSION')
parser.add_option("-u", "--url", dest="url",
                  help="Replace the update url with URL", metavar="URL")

def git_archive():
	ga = subprocess.Popen(['git', 'archive'], stdout=subprocess.PIPE)
	so, _ = ga.communicate()
	return tarfile.open(io.StringIO(so), 'r')

def git_last_commit_date():
	gl = subprocess.Popen(['git', 'log', '-1', '--format=%ct'], stdout=subprocess.PIPE)
	so, _ = gl.communicate()
	ts = int(so.strip())
	return ts

def copygit(dest, mods={}):
	tf = git_archive()
	for mem in tf.getmembers():
		if mem.isfile() or mem.issym() or mem.islnk():
			with open(os.path.join(dest, mem.name), 'w') as df:
				d = tf.extractfile(mem.name)
				if mem.name in mods:
					mods[mem.name](d, df)
				else:
					df.write(d.read())
		elif mem.isdir():
			os.mkdir(os.path.join(dest, mem.name))
	
class ManifestRewriter(object):
	def __init__(self, options):
		self.opts = options
	
	def __call__(self, src, dest):
		manifest = json.load(src)
		
		if self.opts.url is not None:
			manifest['update_url'] = self.opts.url
		
		if self.opts.version is not None:
			ver = self.opts.version
			if ver == 'auto':
				ver = time.strftime('9999.%Y.%m.%d.%H.%M.%S', git_last_commit_date())
			manifest['version'] = ver
		
		self.manifest = manifest
		json.dump(manifest, dest)

def crxmake(src, dst, manifest):
	args = ['crxmake',
		'--pack-extension=%s' % src,
		'--extension-output=%s' % os.path.join(dst, '%s.crx' % manifest['name']),
		'--mode=crx',
		'--pack-extension-key=%s' % '.git/crx.pem',
		]
	subprocess.check_call(args)

if __name__ == '__main__':
	options, args = parser.parse_args()
	
	dest, = args
	
	mr = ManifestRewriter(args)
	tmpdir = tempfile.mkdtemp()
	copygit(tmpdir, {'manifest.json': mr})
	crxmake(tmpdir, dest, mr.manifest)
